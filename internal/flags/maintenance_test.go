package flags

import (
	"os"
	"path/filepath"
	"rpc/pkg/utils"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPrintMaintenanceUsage(t *testing.T) {
	executable := filepath.Base(os.Args[0])
	args := []string{executable}
	flags := NewFlags(args)
	output := flags.printMaintenanceUsage()
	usage := "\nRemote Provisioning Client (RPC) - used for activation, deactivation, maintenance and status of AMT\n\n"
	usage = usage + "Usage: " + executable + " maintenance COMMAND [OPTIONS]\n\n"
	usage = usage + "Supported Maintenance Commands:\n"
	usage = usage + "  changepassword Change the AMT password. A random password is generated by default. Specify -static to set manually. AMT password is required\n"
	usage = usage + "                 Example: " + executable + " maintenance changepassword -u wss://server/activate\n"
	usage = usage + "  syncclock      Sync the host OS clock to AMT. AMT password is required\n"
	usage = usage + "                 Example: " + executable + " maintenance syncclock -u wss://server/activate\n"
	usage = usage + "  synchostname   Sync the hostname of the client to AMT. AMT password is required\n"
	usage = usage + "                 Example: " + executable + " maintenance synchostname -u wss://server/activate\n"
	usage = usage + "  syncip         Sync the IP configuration of the host OS to AMT Network Settings. AMT password is required\n"
	usage = usage + "                 Example: " + executable + " maintenance syncip -staticip 192.168.1.7 -netmask 255.255.255.0 -gateway 192.168.1.1 -primarydns 8.8.8.8 -secondarydns 4.4.4.4 -u wss://server/activate\n"
	usage = usage + "                 If a static ip is not specified, the ip address and netmask of the host OS is used\n"
	usage = usage + "  addwifisettings Add or modify WiFi settings in AMT. AMT password is required. A config.yml or command line flags must be provided for all settings. This command runs without cloud interaction.\n"
	usage = usage + "                 Example: " + executable + " maintenance addwifisettings -password YourAMTPassword -config wificonfig.yaml\n"
	usage = usage + "\nRun '" + executable + " maintenance COMMAND -h' for more information on a command.\n"
	assert.Equal(t, usage, output)
}

func TestParseFlagsMaintenance(t *testing.T) {
	argUrl := "-u wss://localhost"
	argCurPw := "-password " + trickyPassword
	argSyncClock := "syncclock"
	argAddWiFiSettings := "addwifisettings"
	argSyncHostname := "synchostname"
	argSyncIp := "syncip"
	argChangePw := "changepassword"
	newPassword := trickyPassword + "123"
	cmdBase := "./rpc maintenance"

	ipCfgNoParams := IPConfiguration{
		IpAddress: "192.168.1.1",
		Netmask:   "255.255.255.0",
	}
	ipCfgWithParams := IPConfiguration{
		IpAddress:    "10.20.30.40",
		Netmask:      "255.0.0.0",
		Gateway:      "10.0.0.0",
		PrimaryDns:   "8.8.8.8",
		SecondaryDns: "4.4.4.4",
	}
	ipCfgWithLookup := IPConfiguration{
		IpAddress:    ipCfgNoParams.IpAddress,
		Netmask:      ipCfgNoParams.Netmask,
		Gateway:      "10.0.0.0",
		PrimaryDns:   "1.2.3.4",
		SecondaryDns: "5.6.7.8",
	}
	tests := map[string]struct {
		cmdLine      string
		wantResult   int
		wantIPConfig IPConfiguration
		userInput    string
	}{
		"should pass with usage - no additional arguments": {
			cmdLine:    cmdBase,
			wantResult: utils.IncorrectCommandLineParameters,
		},
		"should fail with usage - unhandled task": {
			cmdLine:    cmdBase + " someothertask",
			wantResult: utils.IncorrectCommandLineParameters,
		},
		"should fail - required websocket URL": {
			cmdLine:    cmdBase + " " + argSyncClock + " " + argCurPw,
			wantResult: utils.MissingOrIncorrectURL,
		},
		"should fail - required amt password": {
			cmdLine:    cmdBase + " " + argSyncClock + " " + argUrl,
			wantResult: utils.MissingOrIncorrectPassword,
		},
		"should pass - syncclock": {
			cmdLine:    cmdBase + " " + argSyncClock + " " + argUrl + " " + argCurPw,
			wantResult: utils.Success,
		},
		"should fail - syncclock bad param": {
			cmdLine:    cmdBase + " " + argSyncClock + " -nope " + argUrl + " " + argCurPw,
			wantResult: utils.IncorrectCommandLineParameters,
		},
		"should pass - synchostname no params": {
			cmdLine:    cmdBase + " " + argSyncHostname + " " + argUrl + " " + argCurPw,
			wantResult: utils.Success,
		},
		"should pass - task force flag": {
			cmdLine:    cmdBase + " " + argSyncHostname + " -f " + argUrl + " " + argCurPw,
			wantResult: utils.Success,
		},
		"should fail - synchostname bad param": {
			cmdLine:    cmdBase + " " + argSyncHostname + " -nope " + argUrl + " " + argCurPw,
			wantResult: utils.IncorrectCommandLineParameters,
		},
		"should pass - syncip no params": {
			cmdLine:      cmdBase + " " + argSyncIp + " " + argUrl + " " + argCurPw,
			wantResult:   utils.Success,
			wantIPConfig: ipCfgNoParams,
		},
		"should pass - syncip with params": {
			cmdLine: cmdBase + " " +
				argSyncIp +
				" -staticip " + ipCfgWithParams.IpAddress +
				" -netmask " + ipCfgWithParams.Netmask +
				" -gateway " + ipCfgWithParams.Gateway +
				" -primarydns " + ipCfgWithParams.PrimaryDns +
				" -secondarydns " + ipCfgWithParams.SecondaryDns +
				" " + argUrl + " " + argCurPw,
			wantResult:   utils.Success,
			wantIPConfig: ipCfgWithParams,
		},
		"should pass - syncip with lookup": {
			cmdLine: cmdBase + " " +
				argSyncIp +
				" -gateway " + ipCfgWithLookup.Gateway +
				" -primarydns " + ipCfgWithLookup.PrimaryDns +
				" -secondarydns " + ipCfgWithLookup.SecondaryDns +
				" " + argUrl + " " + argCurPw,
			wantResult:   utils.Success,
			wantIPConfig: ipCfgWithLookup,
		},
		"should fail - syncip bad param": {
			cmdLine:    cmdBase + " " + argSyncIp + " -nope " + argUrl + " " + argCurPw,
			wantResult: utils.IncorrectCommandLineParameters,
		},
		"should fail - syncip MissingOrIncorrectNetworkMask": {
			cmdLine:    cmdBase + " " + argSyncIp + " -netmask 322.299.0.0 " + argUrl + " " + argCurPw,
			wantResult: utils.MissingOrIncorrectNetworkMask,
		},
		"should fail - syncip MissingOrIncorrectStaticIP": {
			cmdLine:    cmdBase + " " + argSyncIp + " -staticip 322.299.0.0 " + argUrl + " " + argCurPw,
			wantResult: utils.MissingOrIncorrectStaticIP,
		},
		"should fail - syncip MissingOrIncorrectGateway": {
			cmdLine:    cmdBase + " " + argSyncIp + " -gateway 322.299.0.0 " + argUrl + " " + argCurPw,
			wantResult: utils.MissingOrIncorrectGateway,
		},
		"should fail - syncip MissingOrIncorrectPrimaryDNS": {
			cmdLine:    cmdBase + " " + argSyncIp + " -primarydns 322.299.0.0 " + argUrl + " " + argCurPw,
			wantResult: utils.MissingOrIncorrectPrimaryDNS,
		},
		"should fail - syncip MissingOrIncorrectSecondaryDNS": {
			cmdLine:    cmdBase + " " + argSyncIp + " -secondarydns 322.299.0.0 " + argUrl + " " + argCurPw,
			wantResult: utils.MissingOrIncorrectSecondaryDNS,
		},
		"should pass - changepassword to random value": {
			cmdLine:    cmdBase + " " + argChangePw + " " + argUrl + " " + argCurPw,
			wantResult: utils.Success,
		},
		"should pass - changepassword using static value": {
			cmdLine:    cmdBase + " " + argChangePw + " -static " + newPassword + " " + argUrl + " " + argCurPw,
			wantResult: utils.Success,
		},
		"should pass - changepassword static value before other flags": {
			cmdLine:    cmdBase + " " + argChangePw + " -static " + newPassword + " " + argUrl + " " + argCurPw,
			wantResult: utils.Success,
		},
		"should pass - changepassword static value after all flags": {
			cmdLine:    cmdBase + " " + argChangePw + " " + argUrl + " " + argCurPw + " -static " + newPassword,
			wantResult: utils.Success,
		},
		"should fail - changepassword bad param": {
			cmdLine:    cmdBase + " " + argChangePw + " -nope " + argUrl + " " + argCurPw,
			wantResult: utils.IncorrectCommandLineParameters,
		},
		"should pass - password user input": {
			cmdLine:    cmdBase + " " + argSyncClock + " " + argUrl,
			wantResult: utils.Success,
			userInput:  trickyPassword,
		},
		"should fail - addwifisettings cannot find file": {
			cmdLine:    cmdBase + " " + argAddWiFiSettings + " ",
			wantResult: utils.IncorrectCommandLineParameters,
		},
		"should fail - addwifisettings fail empty password user input": {
			cmdLine:    cmdBase + " " + argAddWiFiSettings + " --config ../../config.yaml",
			wantResult: utils.MissingOrIncorrectPassword,
			userInput:  "",
		},
		"should pass - addwifisettings password user input": {
			cmdLine:    cmdBase + " " + argAddWiFiSettings + " --config ../../config.yaml",
			wantResult: utils.Success,
			userInput:  trickyPassword,
		},
		"should pass - addwifisettings": {
			cmdLine:    cmdBase + " " + argAddWiFiSettings + " --config ../../config.yaml " + argCurPw,
			wantResult: utils.Success,
		},
	}

	for name, tc := range tests {
		t.Run(name, func(t *testing.T) {
			args := strings.Fields(tc.cmdLine)
			if tc.userInput != "" {
				defer userInput(t, tc.userInput)()
			}
			flags := NewFlags(args)
			flags.amtCommand.PTHI = MockPTHICommands{}
			flags.netEnumerator = testNetEnumerator
			gotResult := flags.ParseFlags()
			if strings.Contains(tc.cmdLine, argAddWiFiSettings) {
				assert.Equal(t, flags.Local, true)
			} else {
				assert.Equal(t, flags.Local, false)
			}
			assert.Equal(t, tc.wantResult, gotResult)
			assert.Equal(t, utils.CommandMaintenance, flags.Command)
			assert.Equal(t, tc.wantIPConfig, flags.IpConfiguration)
		})
	}
}

// TestHandleLocalCommand is a test function for handleAddWifiSettings method of Flags struct.
func TestHandleLocalCommand(t *testing.T) {
	// Setup environment
	os.Setenv("AMT_PASSWORD", "test_password")
	defer os.Unsetenv("AMT_PASSWORD")
	args := []string{"./rpc", "maintenance", "addwifisetting", ""}
	// Setup flags
	flags := NewFlags(args)
	flags.amtCommand.PTHI = MockPTHICommands{}
	expectedErrorCode := utils.IncorrectCommandLineParameters
	errorCode := flags.handleAddWifiSettings()
	if errorCode != expectedErrorCode {
		t.Errorf("handleAddWifiSettings() error code = %v; want %v", errorCode, expectedErrorCode)
	}
}
